/**
 * GOOGLE APPS SCRIPT PARA L√çNEA √âTICA - RED MEDICRON IPS
 * 
 * Sistema confidencial para reportes √©ticos y de integridad
 * 
 * Instrucciones de configuraci√≥n:
 * 1. Ve a https://script.google.com
 * 2. Crea un nuevo proyecto
 * 3. Nombra el proyecto: "Red Medicron IPS - L√≠nea √âtica"
 * 4. Copia y pega este c√≥digo
 * 5. Configura una hoja de c√°lculo de Google para almacenar los reportes
 * 6. Despliega como aplicaci√≥n web
 * 7. Actualiza la URL en LineaEticaPage.tsx
 */

// ===== CONFIGURACI√ìN - ACTUALIZA ESTOS VALORES =====
const SHEET_ID = 'TU_SHEET_ID_LINEA_ETICA_AQUI'; // ID de tu hoja de c√°lculo de Google para L√≠nea √âtica
const SHEET_NAME = 'ReportesEticos'; // Nombre de la pesta√±a en la hoja

// Emails del comit√© de √©tica (IMPORTANTE: Usar emails seguros)
const COMITE_ETICA_EMAILS = [
    'direccion@redmedicron.com',
    'comite.etica@redmedicron.com',
    'legal@redmedicron.com'
];

// Email para notificaciones de recepci√≥n
const EMAIL_NOTIFICACIONES = 'lineaetica@redmedicron.com';

// ===== CONFIGURACI√ìN AVANZADA =====
const CONFIG = {
    // Zona horaria de Colombia
    timeZone: 'America/Bogota',
    
    // Tiempo de respuesta objetivo (d√≠as h√°biles)
    tiempoRespuesta: 10,
    
    // Configuraci√≥n de seguridad
    cifrarDatosPersonales: true,
    
    // Configuraci√≥n de seguimiento
    generarCodigoSeguimiento: true
};

/**
 * Funci√≥n principal que maneja las solicitudes POST
 */
function doPost(e) {
    try {
        console.log('üîí Recibiendo reporte de L√≠nea √âtica...');
        
        // Parsear los datos del formulario
        const data = JSON.parse(e.postData.contents);
        console.log('üìã Datos recibidos:', data);
        
        // Validaciones b√°sicas
        if (!data.tipoReporte || !data.descripcion) {
            throw new Error('Faltan datos obligatorios: tipo de reporte y descripci√≥n');
        }
        
        // Generar c√≥digo de seguimiento si no existe
        const codigoSeguimiento = data.reportId || generarCodigoEtico();
        
        // Guardar en la hoja de c√°lculo
        const resultado = guardarReporteEtico({
            ...data,
            reportId: codigoSeguimiento
        });
        
        // Enviar notificaciones
        enviarNotificacionesEticas(data, codigoSeguimiento);
        
        // Enviar confirmaci√≥n al reportante (si no es an√≥nimo)
        if (!data.anonimo && data.email) {
            enviarConfirmacionReportante(data.email, codigoSeguimiento);
        }
        
        console.log('‚úÖ Reporte √©tico procesado exitosamente:', codigoSeguimiento);
        
        return ContentService
            .createTextOutput(JSON.stringify({
                success: true,
                message: 'Reporte √©tico recibido y procesado',
                reportId: codigoSeguimiento,
                fechaLimiteRespuesta: calcularFechaLimiteRespuesta()
            }))
            .setMimeType(ContentService.MimeType.JSON);
            
    } catch (error) {
        console.error('‚ùå Error procesando reporte √©tico:', error);
        
        return ContentService
            .createTextOutput(JSON.stringify({
                success: false,
                message: 'Error procesando el reporte: ' + error.message
            }))
            .setMimeType(ContentService.MimeType.JSON);
    }
}

/**
 * Generar c√≥digo √∫nico para reportes √©ticos
 */
function generarCodigoEtico() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const random = Math.floor(Math.random() * 999999).toString().padStart(6, '0');
    
    return `LE-${year}${month}${day}-${random}`;
}

/**
 * Guardar reporte √©tico en Google Sheets
 */
function guardarReporteEtico(data) {
    try {
        const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
        
        // Si la hoja no existe, crearla con encabezados
        if (!sheet) {
            crearHojaReportesEticos();
            return guardarReporteEtico(data);
        }
        
        // Preparar datos para la fila
        const fila = [
            data.fecha || new Date().toLocaleString('es-CO', { timeZone: CONFIG.timeZone }),
            data.reportId,
            data.tipoReporte,
            data.areaInvolucrada || 'No especificada',
            data.descripcion,
            data.fechaIncidente || 'No especificada',
            data.testigos || 'No especificados',
            data.evidencias || 'No especificadas',
            data.anonimo === true ? 'AN√ìNIMO' : (data.nombre || 'No proporcionado'),
            data.anonimo === true ? 'AN√ìNIMO' : (data.email || 'No proporcionado'),
            data.anonimo === true ? 'AN√ìNIMO' : (data.telefono || 'No proporcionado'),
            'PENDIENTE', // Estado inicial
            calcularFechaLimiteRespuesta(),
            '', // Responsable asignado
            '', // Observaciones
            '' // Acciones tomadas
        ];
        
        // Agregar la fila
        sheet.appendRow(fila);
        
        // Aplicar formato condicional para reportes an√≥nimos
        if (data.anonimo === true) {
            const lastRow = sheet.getLastRow();
            const range = sheet.getRange(lastRow, 9, 1, 3); // Columnas de datos personales
            range.setBackground('#FFE6E6'); // Fondo rojo claro para datos an√≥nimos
        }
        
        console.log('‚úÖ Reporte √©tico guardado en Google Sheets');
        return { success: true, reportId: data.reportId };
        
    } catch (error) {
        console.error('‚ùå Error guardando reporte √©tico:', error);
        throw new Error('Error al guardar el reporte: ' + error.message);
    }
}

/**
 * Crear hoja de reportes √©ticos con encabezados
 */
function crearHojaReportesEticos() {
    try {
        const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
        const sheet = spreadsheet.insertSheet(SHEET_NAME);
        
        // Encabezados
        const headers = [
            'Fecha de Reporte',
            'C√≥digo de Seguimiento',
            'Tipo de Reporte',
            '√Årea Involucrada',
            'Descripci√≥n',
            'Fecha del Incidente',
            'Testigos',
            'Evidencias',
            'Nombre Reportante',
            'Email Reportante',
            'Tel√©fono Reportante',
            'Estado',
            'Fecha L√≠mite Respuesta',
            'Responsable Asignado',
            'Observaciones',
            'Acciones Tomadas'
        ];
        
        // Insertar encabezados
        sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
        
        // Formato de encabezados
        const headerRange = sheet.getRange(1, 1, 1, headers.length);
        headerRange.setBackground('#1B5E20'); // Verde oscuro
        headerRange.setFontColor('#FFFFFF');
        headerRange.setFontWeight('bold');
        headerRange.setWrap(true);
        
        // Ajustar ancho de columnas
        sheet.setColumnWidth(1, 150); // Fecha
        sheet.setColumnWidth(2, 150); // C√≥digo
        sheet.setColumnWidth(3, 200); // Tipo
        sheet.setColumnWidth(4, 150); // √Årea
        sheet.setColumnWidth(5, 300); // Descripci√≥n
        sheet.setColumnWidth(6, 120); // Fecha incidente
        sheet.setColumnWidth(7, 200); // Testigos
        sheet.setColumnWidth(8, 200); // Evidencias
        sheet.setColumnWidth(9, 150); // Nombre
        sheet.setColumnWidth(10, 200); // Email
        sheet.setColumnWidth(11, 120); // Tel√©fono
        sheet.setColumnWidth(12, 100); // Estado
        sheet.setColumnWidth(13, 150); // Fecha l√≠mite
        sheet.setColumnWidth(14, 150); // Responsable
        sheet.setColumnWidth(15, 250); // Observaciones
        sheet.setColumnWidth(16, 250); // Acciones
        
        // Congelar primera fila
        sheet.setFrozenRows(1);
        
        console.log('‚úÖ Hoja de reportes √©ticos creada exitosamente');
        
    } catch (error) {
        console.error('‚ùå Error creando hoja de reportes √©ticos:', error);
        throw new Error('Error al crear la hoja: ' + error.message);
    }
}

/**
 * Calcular fecha l√≠mite de respuesta (d√≠as h√°biles)
 */
function calcularFechaLimiteRespuesta() {
    const fechaInicio = new Date();
    let diasAgregados = 0;
    let fechaLimite = new Date(fechaInicio);
    
    while (diasAgregados < CONFIG.tiempoRespuesta) {
        fechaLimite.setDate(fechaLimite.getDate() + 1);
        
        // Excluir s√°bados (6) y domingos (0)
        if (fechaLimite.getDay() !== 0 && fechaLimite.getDay() !== 6) {
            diasAgregados++;
        }
    }
    
    return fechaLimite.toLocaleDateString('es-CO');
}

/**
 * Enviar notificaciones al comit√© de √©tica
 */
function enviarNotificacionesEticas(data, codigoSeguimiento) {
    try {
        const fechaLimite = calcularFechaLimiteRespuesta();
        
        // Determinar nivel de urgencia
        const esUrgente = ['corrupcion', 'acoso_discriminacion'].includes(data.tipoReporte);
        const prioridad = esUrgente ? 'ALTA' : 'NORMAL';
        
        const asunto = `üîí [L√çNEA √âTICA - ${prioridad}] Nuevo Reporte: ${codigoSeguimiento}`;
        
        const cuerpoEmail = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #1B5E20, #4CAF50); color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background-color: #f9f9f9; }
        .info-box { background: white; padding: 15px; margin: 10px 0; border-left: 4px solid #4CAF50; }
        .urgent { border-left-color: #F44336; background-color: #FFEBEE; }
        .footer { background: #E0E0E0; padding: 15px; text-align: center; font-size: 12px; }
        .confidential { background: #FFF3E0; padding: 10px; border: 2px solid #FF9800; margin: 15px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîí L√çNEA √âTICA - RED MEDICRON IPS</h1>
        <h2>Nuevo Reporte Recibido</h2>
    </div>
    
    <div class="content">
        <div class="confidential">
            <strong>‚ö†Ô∏è INFORMACI√ìN CONFIDENCIAL:</strong> Este mensaje contiene informaci√≥n sensible del sistema de L√≠nea √âtica. 
            Maneje con estricta confidencialidad seg√∫n las pol√≠ticas institucionales.
        </div>
        
        <div class="info-box ${esUrgente ? 'urgent' : ''}">
            <h3>üìã Informaci√≥n del Reporte</h3>
            <p><strong>C√≥digo de Seguimiento:</strong> ${codigoSeguimiento}</p>
            <p><strong>Fecha de Reporte:</strong> ${data.fecha}</p>
            <p><strong>Tipo de Reporte:</strong> ${data.tipoReporte}</p>
            <p><strong>Prioridad:</strong> <span style="color: ${esUrgente ? '#F44336' : '#4CAF50'};">${prioridad}</span></p>
            <p><strong>√Årea Involucrada:</strong> ${data.areaInvolucrada || 'No especificada'}</p>
            <p><strong>Reporte An√≥nimo:</strong> ${data.anonimo === true ? 'S√ç' : 'NO'}</p>
        </div>
        
        <div class="info-box">
            <h3>üìù Descripci√≥n</h3>
            <p>${data.descripcion}</p>
        </div>
        
        ${data.fechaIncidente ? `
        <div class="info-box">
            <h3>üìÖ Fecha del Incidente</h3>
            <p>${data.fechaIncidente}</p>
        </div>
        ` : ''}
        
        ${data.testigos ? `
        <div class="info-box">
            <h3>üë• Testigos</h3>
            <p>${data.testigos}</p>
        </div>
        ` : ''}
        
        ${data.evidencias ? `
        <div class="info-box">
            <h3>üìÑ Evidencias Disponibles</h3>
            <p>${data.evidencias}</p>
        </div>
        ` : ''}
        
        ${!data.anonimo && data.nombre ? `
        <div class="info-box">
            <h3>üë§ Datos del Reportante</h3>
            <p><strong>Nombre:</strong> ${data.nombre}</p>
            ${data.email ? `<p><strong>Email:</strong> ${data.email}</p>` : ''}
            ${data.telefono ? `<p><strong>Tel√©fono:</strong> ${data.telefono}</p>` : ''}
        </div>
        ` : ''}
        
        <div class="info-box">
            <h3>‚è∞ Cronograma</h3>
            <p><strong>Fecha L√≠mite de Respuesta:</strong> ${fechaLimite}</p>
            <p><strong>D√≠as H√°biles para Respuesta:</strong> ${CONFIG.tiempoRespuesta} d√≠as</p>
        </div>
        
        <div class="info-box">
            <h3>üìä Pr√≥ximos Pasos</h3>
            <ol>
                <li>Asignar responsable del caso</li>
                <li>Revisar y validar la informaci√≥n</li>
                <li>Iniciar investigaci√≥n seg√∫n protocolo</li>
                <li>Documentar avances en el sistema</li>
                <li>Responder antes de la fecha l√≠mite</li>
            </ol>
        </div>
    </div>
    
    <div class="footer">
        <p>Este reporte fue generado autom√°ticamente por el Sistema de L√≠nea √âtica de Red Medicron IPS</p>
        <p>Para acceder al sistema de seguimiento, ingresa a: <a href="https://docs.google.com/spreadsheets/d/${SHEET_ID}">Panel de Control</a></p>
        <p><strong>Confidencial:</strong> Este mensaje es estrictamente confidencial y est√° dirigido √∫nicamente al comit√© de √©tica.</p>
    </div>
</body>
</html>
        `;
        
        // Enviar email a cada miembro del comit√©
        COMITE_ETICA_EMAILS.forEach(email => {
            GmailApp.sendEmail(
                email,
                asunto,
                '', // Texto plano vac√≠o
                {
                    htmlBody: cuerpoEmail,
                    attachments: [],
                    replyTo: EMAIL_NOTIFICACIONES
                }
            );
        });
        
        console.log(`‚úÖ Notificaciones enviadas al comit√© de √©tica (${COMITE_ETICA_EMAILS.length} emails)`);
        
    } catch (error) {
        console.error('‚ùå Error enviando notificaciones al comit√©:', error);
        // No lanzar error para no afectar el proceso principal
    }
}

/**
 * Enviar confirmaci√≥n al reportante (si no es an√≥nimo)
 */
function enviarConfirmacionReportante(email, codigoSeguimiento) {
    try {
        const asunto = `‚úÖ Confirmaci√≥n de Reporte √âtico - ${codigoSeguimiento}`;
        
        const cuerpoEmail = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #1B5E20, #4CAF50); color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background-color: #f9f9f9; }
        .info-box { background: white; padding: 15px; margin: 10px 0; border-left: 4px solid #4CAF50; }
        .footer { background: #E0E0E0; padding: 15px; text-align: center; font-size: 12px; }
        .security-notice { background: #E8F5E8; padding: 15px; border: 1px solid #4CAF50; margin: 15px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîí Red Medicron IPS</h1>
        <h2>Confirmaci√≥n de Reporte √âtico</h2>
    </div>
    
    <div class="content">
        <div class="security-notice">
            <h3>‚úÖ Tu reporte ha sido recibido exitosamente</h3>
            <p>Gracias por contribuir a mantener los altos est√°ndares √©ticos de Red Medicron IPS.</p>
        </div>
        
        <div class="info-box">
            <h3>üìã Informaci√≥n de tu Reporte</h3>
            <p><strong>C√≥digo de Seguimiento:</strong> ${codigoSeguimiento}</p>
            <p><strong>Fecha de Recepci√≥n:</strong> ${new Date().toLocaleString('es-CO', { timeZone: CONFIG.timeZone })}</p>
            <p><strong>Estado:</strong> RECIBIDO Y EN PROCESO</p>
        </div>
        
        <div class="info-box">
            <h3>üìÖ Cronograma de Respuesta</h3>
            <p><strong>Fecha L√≠mite de Respuesta:</strong> ${calcularFechaLimiteRespuesta()}</p>
            <p>Recibir√°s una respuesta oficial dentro de ${CONFIG.tiempoRespuesta} d√≠as h√°biles.</p>
        </div>
        
        <div class="info-box">
            <h3>üîí Confidencialidad Garantizada</h3>
            <ul>
                <li>Tu informaci√≥n ser√° tratada con estricta confidencialidad</li>
                <li>El reporte ser√° revisado √∫nicamente por el comit√© de √©tica autorizado</li>
                <li>Se garantiza la protecci√≥n contra represalias</li>
                <li>El proceso se realizar√° conforme a las pol√≠ticas institucionales</li>
            </ul>
        </div>
        
        <div class="info-box">
            <h3>üìû Contacto Adicional</h3>
            <p>Si necesitas proporcionar informaci√≥n adicional o tienes preguntas:</p>
            <p><strong>Email:</strong> ${EMAIL_NOTIFICACIONES}</p>
            <p><strong>Tel√©fono:</strong> 01 8000 123 456 opci√≥n 4</p>
            <p><strong>C√≥digo de Referencia:</strong> ${codigoSeguimiento}</p>
        </div>
    </div>
    
    <div class="footer">
        <p>Red Medicron IPS - Compromiso con la √âtica y la Transparencia</p>
        <p>Este mensaje es confidencial. Si lo recibiste por error, elim√≠nalo inmediatamente.</p>
    </div>
</body>
</html>
        `;
        
        GmailApp.sendEmail(
            email,
            asunto,
            '', // Texto plano vac√≠o
            {
                htmlBody: cuerpoEmail,
                replyTo: EMAIL_NOTIFICACIONES
            }
        );
        
        console.log(`‚úÖ Confirmaci√≥n enviada al reportante: ${email}`);
        
    } catch (error) {
        console.error('‚ùå Error enviando confirmaci√≥n al reportante:', error);
        // No lanzar error para no afectar el proceso principal
    }
}

/**
 * Funci√≥n para probar el sistema
 */
function probarLineaEtica() {
    const datosTest = {
        reportId: generarCodigoEtico(),
        fecha: new Date().toLocaleString('es-CO', { timeZone: CONFIG.timeZone }),
        tipoReporte: 'corrupcion',
        areaInvolucrada: 'Facturaci√≥n',
        descripcion: 'Reporte de prueba del sistema de L√≠nea √âtica',
        fechaIncidente: '2024-01-15',
        testigos: 'Testigo de prueba',
        evidencias: 'Documentos de prueba',
        nombre: 'Usuario de Prueba',
        email: 'test@redmedicron.com',
        telefono: '123456789',
        anonimo: false
    };
    
    try {
        console.log('üß™ Iniciando prueba del sistema de L√≠nea √âtica...');
        
        // Probar guardado
        const resultado = guardarReporteEtico(datosTest);
        console.log('‚úÖ Prueba de guardado exitosa:', resultado);
        
        // Probar notificaciones
        enviarNotificacionesEticas(datosTest, datosTest.reportId);
        enviarConfirmacionReportante(datosTest.email, datosTest.reportId);
        
        console.log('‚úÖ Prueba completa del sistema de L√≠nea √âtica exitosa');
        
    } catch (error) {
        console.error('‚ùå Error en la prueba del sistema:', error);
    }
}
